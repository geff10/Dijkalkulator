package esse.Dijkalkulator;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Map;
import java.util.Properties;

import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;

import net.miginfocom.swing.MigLayout;
import javax.swing.JScrollPane;
import javax.swing.JButton;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeEvent;

public class JDialogPointTypes extends JDialog {
	Properties props = new Properties();
	CapacityConfigManager ccM = CapacityConfigManager.getInstance();

	private JTable tablePointTypes;
	private JTable tablePointTypes_1;
	final DefaultTableModel tableModelPT;
	boolean isConfigurationSaved = false;
	String defaultConfigFile = System.getProperty("user.dir") + System.getProperty("file.separator")
			+ "point_type.config";
	String lastConfigFile;

	public JDialogPointTypes() {
		setTitle("Pontcsoportok");
		this.setSize(613, 400);
		this.setModal(true);
		getContentPane().setLayout(new MigLayout("", "[grow][grow]", "[grow][]"));

		JPanel panel = new JPanel();
		getContentPane().add(panel, "cell 0 0,grow");

		JScrollPane scrollPane = new JScrollPane();
		panel.add(scrollPane);

		tablePointTypes_1 = new JTable();

		scrollPane.setViewportView(tablePointTypes_1);

		Object[][] data = new Object[][] {};

		tableModelPT = new DefaultTableModel(data, new String[] { "Pontcsoport", "Ár[Ft/MJ/óra/év]" });
		tablePointTypes_1.setModel(tableModelPT);
		tableModelPT.addTableModelListener(new TableModelListener() {

			public void tableChanged(TableModelEvent tme) {
				if (tme.getType() == TableModelEvent.UPDATE) {
					isConfigurationSaved = false;
					// System.out.println("");
					// System.out.println("Cell " + tme.getFirstRow() + ", "
					// + tme.getColumn() + " changed. The new value: "
					// + tableModelPT.getValueAt(tme.getFirstRow(),
					// tme.getColumn()));
				}
			}
		});

		JPanel panel_1 = new JPanel();
		getContentPane().add(panel_1, "cell 1 0,grow");
		panel_1.setLayout(new MigLayout("", "[61px]", "[23px][]"));

		JButton btnUjSor = new JButton("Új sor");
		btnUjSor.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				addRow();
			}
		});
		panel_1.add(btnUjSor, "cell 0 0,alignx left,aligny top");

		JButton btnTorles = new JButton("Törlés");
		btnTorles.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				deleteRow(tablePointTypes_1.getSelectedRow());
			}
		});
		panel_1.add(btnTorles, "cell 0 1");

		JMenuBar menuBar = new JMenuBar();
		setJMenuBar(menuBar);

		JMenu mnFile = new JMenu("File");
		menuBar.add(mnFile);

		JMenuItem mntmMegnyitas = new JMenuItem("Megnyitás");
		mntmMegnyitas.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				final JFileChooser fc = new JFileChooser();
				// In response to a button click:
				int returnVal = fc.showOpenDialog(
						App.getoGUIForDijkalkulator().getoPointTypesMenuActionListener().getoJDialogPointTypes());
				if (returnVal == JFileChooser.APPROVE_OPTION) {
					File openedFile = fc.getSelectedFile();
					lastConfigFile = openedFile.toString();

					try {
						ccM.setCtFile(openedFile.toString());
						ccM.ReadCapacityTypes();
						props = ccM.getCapacityTypesProp();

						setTableModel();
					} catch (FileNotFoundException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					} catch (NullPointerException e) {
						System.out.println("NULLPOINTER");
						e.printStackTrace();
					}

				}
			}

			private void setTableModel() {
				tableModelPT.setRowCount(0);
				for (Map.Entry<?, ?> entry : props.entrySet()) {
					String key = (String) entry.getKey();
					String value = (String) entry.getValue();
					tableModelPT.addRow(new Object[] { key, value });
				}
			} // setTableModel
		});// mntmMegnyitas.addActionListener
		mnFile.add(mntmMegnyitas);

		JMenuItem mntmMentes = new JMenuItem("Mentés");
		mntmMentes.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent ae) {
				if (!isConfigurationSaved) {
					if (lastConfigFile.isEmpty()) {
						if (!configFileExists()) {
							saveFileWithDialog();
						} else
							saveSimply(defaultConfigFile);
					} else
						saveSimply(lastConfigFile);
				}
			}

		});
		mnFile.add(mntmMentes);

		JMenuItem mntmMentesMaskent = new JMenuItem("Mentés másként...");
		mntmMentesMaskent.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				saveFileWithDialog();
			}
		});
		mnFile.add(mntmMentesMaskent);

	}// JDialogPointTypes

	// --------methods-------------------------------------------------------
	private void addRow() {
		Object[] row = new Object[2];
		row[0] = "";
		row[1] = "";
		tableModelPT.addRow(row);
	}// addRow()

	private void deleteRow(int i) {
		if (i == -1) // no rows
			return;
		if (JOptionPane.showConfirmDialog(this, "Valóban törölni szeretné a kijelölt sort?", "Törlés?",
				JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION)
			tableModelPT.removeRow(i);
	}// deleteRow

	private void saveFileWithDialog() {
		// TODO Auto-generated method stub
		JFileChooser fileChooser = new JFileChooser();
		if (fileChooser.showSaveDialog(App.getoGUIForDijkalkulator().getoPointTypesMenuActionListener()
				.getoJDialogPointTypes()) == JFileChooser.APPROVE_OPTION) {
			File fileToSave = fileChooser.getSelectedFile();
			System.out.println(fileToSave.toString());
			if (props != null) {
				copyTable2Props();
				saveSimply(fileToSave.toString());
		}
	} // saveFileWithDialog()

	private boolean configFileExists() {
		File f = new File(defaultConfigFile);
		if (f.exists() && !f.isDirectory())
			return true;
		return false;
	}// configFileExists

	private void saveSimply(String file2Save) {
		File fileToSave = new File(file2Save);
		if (props != null) {
			copyTable2Props();

			try {
				ccM.setCapacityTypesProp(props);
				ccM.setCtFile(fileToSave.toString());
				ccM.WriteCapacityTypes();
				lastConfigFile = fileToSave.toString();

				isConfigurationSaved = true;
			} catch (FileNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		} else
			System.out.println("nullllllllllll");
	}

	private void copyTable2Props() {
		for (int i = 0; i < tableModelPT.getRowCount(); i++) {
			props.clear();
			props.setProperty(tableModelPT.getValueAt(i, 0).toString(), tableModelPT.getValueAt(i, 1).toString());
		}
		
	}
}
